from numpy import sin, cos, zeros, linalg
import matplotlib.pyplot as plt

x0 = 0  # Начальная координата области решения
xn = 5  # Конечная координата области решения
n = 100  # Число точек координатной сетки
dx = (xn - x0) / (n - 1)  # Задание равномерной координатной сетки с шагом dx
x = [i * dx + x0 for i in range(n)]  # Задание равномерной координатной сетки с шагом dx


def f(i):  # Функция правой части уравнения
    return 2 * sin(x[i] ** 2) + cos(x[i] ** 2)


v1 = 1.0  # Вид ГУ на левой границе (1 - Дирихле, 2 - Неймана)
g1 = 0.0  # Значение ГУ на левой границе
v2 = 2.0  # 'Вид ГУ на правой границе (1 - Дирихле, 2 - Неймана)
g2 = -0.5  # Значение ГУ на правой границе
a = zeros([n, n])  # Задание матрицы коэффициентов СЛАУ размерностью n x n
b = zeros([1, n])  # Задание матрицы-строки свободных членов СЛАУ размерностью 1 x n
# Определение коэффициентов и свободных членов СЛАУ,
# соответствующих граничным условиям и проверка корректности
# значений параметров v1, v2
b[0, n - 1] = g1
if v1 == 1:
    a[0, 0] = 1
elif v1 == 2:
    a[0, 0] = -1 / dx
    a[0, 1] = 1 / dx
else:
    print('Параметр v1 имеет неправильное значение')
b[0, n - 1] = g2
if v2 == 1:
    a[n - 1, n - 1] = 1
elif v2 == 2:
    a[n - 1, n - 1] = 1 / dx
    a[n - 1, n - 2] = -1 / dx
else:
    print('Параметр v2 имеет неправильное значение')
# Определение коэффициентов и свободных членов СЛАУ,
# соответствующих внутренним точкам области
for i in range(1, n - 1):
    a[i, i] = -2 / dx ** 2
    a[i, i + 1] = 1 / dx ** 2
    a[i, i - 1] = 1 / dx ** 2
    b[0, i] = f(i)
u = linalg.solve(a, b.T).T  # Решение СЛАУ


def viz(v1, v2):
    if v1 == v2 == 1:
        return "ГУ  Дирихле на левой и ГУ Дирихле на правой  границе "
    elif v1 == 1 and v2 == 2:
        return "ГУ  Дирихле на левой и ГУ Неймана на правой  границе "
    elif v2 == 1 and v2 == 1:
        return "ГУ  Неймана на левой и ГУ Дирихле  на правой  границе "


plt.figure()
plt.title("График функции правой части уравнения Пуассона")
y = [f(i) for i in range(n)]
plt.plot(x, y)
plt.grid(True)
plt.xlabel('x')
plt.ylabel('f(x)')
plt.figure()

plt.title("График искомой функции уравнения Пуассона")
plt.xlabel('x')
plt.ylabel('u(x)')
plt.plot(x, u[0, :], label='%s' % viz(v1, v2))
plt.legend(loc='best')
plt.grid(True)
plt.show()
